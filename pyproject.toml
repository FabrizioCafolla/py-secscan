[project]
name = "py-secscan"
version = "0.1.1"
authors = [{ name = "FabrizioCafolla" }]
description = "PySecScan is the tool that allows you to perform security scans in your Python project through a simple YAML configuration."
keywords = [
  "py-secscan", "sast", "requirements", "packaging"
]
classifiers = [
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Software Development :: Quality Assurance",
  "Topic :: Software Development :: Testing",
  "Topic :: Software Development :: Libraries",
]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "cyclonedx-bom>=5.1.2",
    "jsonschema>=4.23.0",
    "pyyaml>=6.0.2",
    "requests>=2.32.3",
    "ruff>=0.8.4"
]

[project.optional-dependencies]
view = [
  "streamlit>=1.42.0"
]

[project.scripts]
py-secscan = "py_secscan:entrypoint"

[dependency-groups]
dev = [
    "pre-commit>=4.0.1",
    "pytest>=8.3.4",
    "toml-cli>=0.7.0",
]

[tool.uv.workspace]
members = ["py-secscan"]

[tool.uv]
default-groups = ["dev"]
package = true
environments = [
    "sys_platform == 'darwin'",
    "sys_platform == 'linux'",
]

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true
license-files = []

[tool.setuptools.package-data]
"py_secscan" = ["scan/parser/v1/pysecscan.schema.json"]

[tool.ruff]
target-version = "py312"
line-length = 120
indent-width = 4
exclude = [
    ".venv",
    ".py-secscan",
    ".vscode",
    ".pytest_cache",
    ".devbox",
    "build",
    "dist",
    "__pycache__",
    "sbom.json"
]

[tool.ruff.lint]
select = [   
    "E",  # Error Pyflakes
    "F",  # Error Pyflakes
    "W",  # Style warning
    "I",  # Import sorting
    "N",  # Naming convention
    "UP", # Upgrade Python
    "B",  # Bugbear (best practices)
    "C",  # Complexity (McCabe)
    "SIM", # Simplicity
    "T20", # Print debugging
    "PL",  # Pylint (best practices)
    "PERF", # Performance
]
ignore = [
    "B006",
    "PLR0913"
]
fixable = ["ALL"] # Allow fix for all enabled rules (when `--fix`) is provided.
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$" # Allow unused variables when underscore-prefixed.

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["py_secscan"]
lines-after-imports = 2

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-line-length = 140

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.liccheck]
requirement_txt_file = ".py-secscan/requirements-venv.txt"
authorized_licenses = [
    "academic free license (afl)",
    "apache license 2.0",
    "apache software",
    "apache software, bsd",
    "bsd",
    "isc license (iscl)",
    "isc license",
    "mit",
    "mozilla public license 2.0 (mpl 2.0)",
    "osi approved",
    "osi approved",
    "python software foundation",
    "the unlicense (unlicense)",
    "the unlicense",
]

